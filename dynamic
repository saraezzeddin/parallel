#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <math.h>
#include <time.h>


#define WIDTH 1200
#define HEIGHT 1200
#define MAX_ITERATIONS 512

int mandelbrot(double x, double y) {
    double real = x;
    double imag = y;
    int n;
    for (n = 0; n < MAX_ITERATIONS; n++) {
        double real2 = real * real;
        double imag2 = imag * imag;
        if (real2 + imag2 > 4.0) {
            return n;
        }
        imag = 2 * real * imag + y;
        real = real2 - imag2 + x;
    }
    return 0;
}

int main(int argc, char **argv) {
    clock_t start, end;
    double cpu_time_used;
    start = clock();
    MPI_Init(&argc, &argv);
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int rows_per_process = HEIGHT / size;
    int *image = (int *)malloc(sizeof(int) * WIDTH * rows_per_process);

    for (int i = rank * rows_per_process; i < (rank + 1) * rows_per_process; i++) {
        for (int j = 0; j < WIDTH; j++) {
            double x = (double)j / WIDTH * 4.0 - 2.0;
            double y = (double)i / HEIGHT * 4.0 - 2.0;
            int value = mandelbrot(x, y);
            image[(i - rank * rows_per_process) * WIDTH + j] = value;
        }
    }

    if (rank == 0) {
        int *final_image = (int *)malloc(sizeof(int) * WIDTH * HEIGHT);
        for (int i = 0; i < rows_per_process; i++) {
            for (int j = 0; j < WIDTH; j++) {
                final_image[i * WIDTH + j] = image[i * WIDTH + j];
            }
        }
        for (int r = 1; r < size; r++) {
            MPI_Recv(image, WIDTH * rows_per_process, MPI_INT, r, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            for (int i = 0; i < rows_per_process; i++) {
                for (int j = 0; j < WIDTH; j++) {
                    final_image[(r * rows_per_process + i) * WIDTH + j] = image[i * WIDTH + j];
                }
            }
        }

        FILE *fp = fopen("mandelbrot.pgm", "wb");
        fprintf(fp, "P2\n");
        fprintf(fp, "%d %d\n", WIDTH, HEIGHT);
        fprintf(fp, "255\n");
        for (int i = 0; i < HEIGHT; i++) {
            for (int j = 0; j < WIDTH; j++) {
                fprintf(fp, "%d ", final_image[i * WIDTH + j]);
            }
            fprintf(fp, "\n");
        }
        fclose(fp);
        free(final_image);
    } else {
        MPI_Send(image, WIDTH * rows_per_process, MPI_INT, 0, 0, MPI_COMM_WORLD);
    }

    free(image);
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Execution time: %f seconds\n", cpu_time_used);
    MPI_Finalize();
    return 0;
}
